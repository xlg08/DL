"""
案例:
    演示RNN层的用法.

RNN层解释:
    它属于 循环神经网络的 循环网络层, 目的是: 基于 当前时刻的输入(x) 和 上一时刻的隐藏状态(ht-1) 推测出: 当前时刻的输出(y) 和 当前时刻的隐藏状态(ht)

    API:
        # 1. 创建 循环网络层.
        rnn = nn.RNN(输入数据的维度, 隐藏层的维度, 隐藏层的层数 -> 默认是1)

        # 2. 通过 RNN处理数据.
        output, hn = rnn(x, h0)
"""

# 导包
import torch
import torch.nn as nn       # neural network: 神经网络

# 1. 创建 循环网络层.
# 参1: 词向量维度
# 参2: 隐藏状态向量维度
# 参3: 隐藏层数量, 默认是: 1
rnn = nn.RNN(input_size=128, hidden_size=256, num_layers=1)

# 2. 定义变量, 表示: 输入的x
# 参1: 每个句子的词个数, 参2: 句子的数量, 参3: 词向量维度.
x = torch.randn(size=(5, 32, 128))      # 32个句子, 每个句子5个词, 每个词128维

# 3. 定义变量, 记录: 上一时刻的隐藏状态.
# 参1: 隐藏层数量, 参2: 句子的数量, 参3: 隐藏状态向量维度.
h0 = torch.randn(size=(1, 32, 256))

# 4. 调用RNN处理, 获取到: 当前的预测值 和 当前的隐藏状态.
output, h1 = rnn(x, h0)
print(f'shape: {output.shape}, {h1.shape}') # [5, 32, 256], [1, 32, 256]